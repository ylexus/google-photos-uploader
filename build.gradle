import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.jvm.Jvm

import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.runtime' version '1.8.5'
    id "name.remal.check-updates" version "1.0.211"

    // TODO no good alternative to maven duplicate finder
    // id "net.idlestate.gradle-duplicate-classes-check" version "1.0.2"

    id "ca.cutterslade.analyze" version "1.4.2"
}

version = readEnvOrDefault 'VERSION', '0.DEV'
sourceCompatibility = '14'

ext {
    javafxVersion = '14.0.2'
    windowsVmPath = "$System.env.HOME/Virtual Machines.localized/Windows 10 x64.vmwarevm/Windows 10 x64.vmx"
    linuxVmPath = "$System.env.HOME/Virtual Machines.localized/OpenSUSE.vmwarevm/OpenSUSE.vmx"
    fullPackageOutputDir = "$buildDir/fullpackage"
}

repositories {
    mavenLocal() {
        content {
            includeGroup "net.yudichev.jiotty"
        }
    }
    mavenCentral()
    maven {
        url "https://maven.google.com"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "https://sandec.jfrog.io/artifactory/repo"
    }
}

dependencies {
    ext.orgJunitJupiterVersion = '5.6.0'
    ext.orgMockitoVersion = '3.2.4'
    ext.orgImmutablesVersion = '2.8.3'
    ext.netYudichevJiottyVersion = '1.6.5'

    annotationProcessor "org.immutables:value:$orgImmutablesVersion"
    testAnnotationProcessor "org.immutables:value:$orgImmutablesVersion"

    implementation platform("net.yudichev.jiotty:jiotty-bom:$netYudichevJiottyVersion")
    implementation platform("com.google.inject:guice-bom:4.2.2")

    // This is needed as we depend on no_aop guice instead (regular Guice does not work on Java 14)
    def withoutGuice = {
        exclude group: "com.google.inject", module: "guice"
    }

    implementation "net.yudichev.jiotty:jiotty-common", withoutGuice
    implementation "net.yudichev.jiotty:jiotty-connector-google-common", withoutGuice
    implementation "net.yudichev.jiotty:jiotty-connector-google-photos", withoutGuice
    implementation "com.google.inject.extensions:guice-assistedinject", withoutGuice
    implementation "org.slf4j:slf4j-api"
    implementation "org.apache.logging.log4j:log4j-api"
    implementation "com.google.inject:guice::no_aop"
    implementation "javax.inject:javax.inject"
    implementation "com.google.guava:guava:29.0-jre"
    implementation "com.google.code.findbugs:jsr305"
    implementation "com.google.errorprone:error_prone_annotations"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.google.api:gax"
    implementation "com.google.api.grpc:proto-google-common-protos"
    implementation "com.google.http-client:google-http-client"
    implementation "commons-cli:commons-cli:1.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    implementation "de.codecentric.centerdevice:centerdevice-nsmenufx:2.1.7"
    implementation "io.grpc:grpc-api"
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.sandec:mdfx:0.1.6"

    // This is to test dependency analyser
    //implementation "org.apache.commons:commons-skin:4.2"
    compileOnly "org.immutables:value:$orgImmutablesVersion"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
    runtimeOnly "org.apache.logging.log4j:log4j-jcl:2.12.1"
    runtimeOnly "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9"
    runtimeOnly "com.lmax:disruptor:3.4.2"

    testImplementation "net.yudichev.jiotty:jiotty-common"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$orgJunitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$orgJunitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$orgJunitJupiterVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$orgMockitoVersion"
    testImplementation "org.hamcrest:hamcrest:2.1"
    testCompileOnly "org.immutables:value:$orgImmutablesVersion"

    // these are added by the javafx plugin
    permitUnusedDeclared "org.openjfx:javafx-base:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-controls:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-graphics:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:mac"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:linux"
    permitUnusedDeclared "org.openjfx:javafx-media:$javafxVersion:win"
}

test {
    systemProperty "user.language", "en"
}

String clientSecretPath = readEnvOrNull('CLIENT_SECRET_PATH')
task copyClientSecretIfDefined {
    doLast {
        if (clientSecretPath) {
            if (!file(clientSecretPath).exists()) {
                throw new InvalidUserDataException("Client secret file not found: $clientSecretPath")
            }
            processResources {
                from clientSecretPath
                rename(file(clientSecretPath).name, 'client_secret.json')
            }
        }
    }
}
processResources.dependsOn 'copyClientSecretIfDefined'

task requireClientSecret {
    doLast {
        if (!clientSecretPath) {
            throw new InvalidUserDataException("CLIENT_SECRET_PATH system property or environment variable missing - " +
                    "should exist and contain a path to Google OAuth client secret file")
        }
    }
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': archiveVersion
    }
}

application {
    mainClassName = 'net.yudichev.googlephotosupload.Main'
    applicationName = 'Jiotty Photos Uploader'
    applicationDefaultJvmArgs = ['--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED',
                                 '--add-opens', 'javafx.controls/javafx.scene.control=ALL-UNNAMED',
                                 '--add-exports', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
                                 '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED',
                                 '--add-exports', 'javafx.graphics/com.sun.javafx.menu=ALL-UNNAMED']
}

javafx {
    version = "$javafxVersion"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

runtime {
    //noinspection GroovyAssignabilityCheck, GroovyAccessibility
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages']

    // required by httpclient, missed by default when building and running on Windows
    //noinspection GroovyAssignabilityCheck,GroovyAccessibility
    modules = [
            // required by httpclient, missed by default when building and running on Windows
            'java.naming',
            // required to establish an SSL connection
            'jdk.crypto.ec',
            // required for a heap dump via JMX
            'jdk.management'
    ]
    additive = true

    jpackage {
        jvmArgs = ['-Dprism.verbose=true']
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            installerType = 'dmg'
            imageOptions = ['--verbose', /*'--mac-sign',*/ '--mac-signing-key-user-name', 'Alexey Yudichev (J4R72JZQ9P)']
            installerOptions = ['--verbose']
            resourceDir = file("$buildDir/packaging-resources/macOS/out")
        }
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = 'msi'
            imageOptions = ['--verbose']
            installerOptions = ['--verbose', '--win-per-user-install', '--win-menu', '--win-upgrade-uuid', '58e3cc92-0df9-4089-9609-8ad54b2608e7']
            resourceDir = file("$rootDir/src/main/packaging-resources/windows")
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            imageName = 'JiottyPhotosUploader'  // cannot have spaces in Debian resource names
            installerName = 'JiottyPhotosUploader' // cannot have spaces in Debian resource names
            imageOptions = ['--verbose']
            resourceDir = file("$rootDir/src/main/packaging-resources/linux")
            installerOptions = ['--verbose', '--linux-shortcut', '--linux-package-name', 'jiotty-photos-uploader']
        }
    }
}
jpackage.dependsOn 'check'
jpackage.dependsOn 'requireClientSecret'

task copyPackagingResources(type: Copy) {
    onlyIf { !org.gradle.internal.os.OperatingSystem.current().linux }
    if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
        from("$rootDir/src/main/packaging-resources/macOS/out") {
            exclude '**/*.plist'
        }
        from("$rootDir/src/main/packaging-resources/macOS/out") {
            include '**/*.plist'
            filter(ReplaceTokens, tokens: [version: version])
        }
        into "$buildDir/packaging-resources/macOS/out"
    } else if (org.gradle.internal.os.OperatingSystem.current().windows) {
        from("$rootDir/src/main/packaging-resources/windows/out") {
            include '**/*.xml'
            filter(ReplaceTokens, tokens: [version: version, appName: project.name])
        }
        into "$buildDir/packaging-resources/windows/out"
    } else {
        // workaround for "task.destinationDir must not be null"
        destinationDir buildDir
    }
}
jpackage.dependsOn 'copyPackagingResources'

task ensureVersionReleaseReady {
    doLast {
        if (!(version ==~ /\d+\.\d+\.\d+/)) {
            throw new InvalidUserDataException("version must be set to X.Y.Z format but was: ${version}; add -DVERSION=X.Y.Z to the command line and try again")
        }
    }
}

def finalFileNameWindowsMsi = "Windows7-jiotty-photos-uploader-${version}.msi"
// TODO this file name is duplicated
def finalFileNameWindowsMsix = "Windows10-jiotty-photos-uploader-${version}.msix"

task prepareOsSpecificPackaging {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().windows }
    doLast {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            ant.move file: "$buildDir/jpackage/$applicationName-${version}.msi",
                    tofile: "$fullPackageOutputDir/$finalFileNameWindowsMsi"
        }
    }
}

task runOsSpecificPackaging(type: Exec) {
    onlyIf { !org.gradle.internal.os.OperatingSystem.current().linux }
    if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
        commandLine "$projectDir/macos_notarize_dmg.sh", "$project.name", "$version", Jvm.current().getJavaHome()
    }
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        commandLine "$projectDir/windows-create-appx.bat", "$version"
    }
}

def finalFileNameLinuxDeb = "Linux-jiotty-photos-uploader_$version-1_amd64.deb"
def finalFileNameLinuxRpm = "Linux-jiotty-photos-uploader-$version-1.x86_64.rpm"

task renameDistribution() {
    onlyIf { !org.gradle.internal.os.OperatingSystem.current().windows }
    doLast {
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            ant.move file: "$buildDir/jpackage/$applicationName-${version}.dmg",
                    tofile: "$fullPackageOutputDir/macOS-jiotty-photos-uploader-${version}.dmg"
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            ant.move file: "$buildDir/jpackage/jiotty-photos-uploader_$version-1_amd64.deb",
                    tofile: "$fullPackageOutputDir/$finalFileNameLinuxDeb"
            ant.move file: "$buildDir/jpackage/jiotty-photos-uploader-$version-1.x86_64.rpm",
                    tofile: "$fullPackageOutputDir/$finalFileNameLinuxRpm"
        }
    }
}

/**
 * Package the app on the current platform.
 */
task fullpackage {
    doFirst {
        mkdir fullPackageOutputDir
    }

    dependsOn ensureVersionReleaseReady

    dependsOn jpackage
    jpackage.mustRunAfter 'ensureVersionReleaseReady'

    dependsOn prepareOsSpecificPackaging
    prepareOsSpecificPackaging.mustRunAfter 'jpackage'

    dependsOn runOsSpecificPackaging
    runOsSpecificPackaging.mustRunAfter 'prepareOsSpecificPackaging'

    dependsOn renameDistribution
    renameDistribution.mustRunAfter 'runOsSpecificPackaging'
}

int vmrun(GString vmPath, String usernamePropertyName, String pwdPropertyName, String command, List<String> args = [], ignoreExitCode = false) {
    def vmUser = readEnvOrFail usernamePropertyName
    def vmPassword = readEnvOrFail pwdPropertyName
    def argsFull = ['vmrun', '-T', 'ws', '-gu', vmUser, '-gp', vmPassword, command, vmPath] + args
    return exec {
        commandLine argsFull
        ignoreExitValue ignoreExitCode
    }.exitValue
}

int vmrunWindows(String command, List<String> args = [], ignoreExitCode = false) {
    vmrun windowsVmPath, 'VMRUN_WIN_USER', 'VMRUN_WIN_PWD', command, args, ignoreExitCode
}

task runRemoteWindowsBuild(dependsOn: requireClientSecret) {
    doLast {
        def remoteCloneDir = "C:\\java\\jiotty-photos-uploader"
        vmrunWindows 'start'
        def tmpClientSecretGuestPath = 'C:\\java\\clientSecret.json'
        vmrunWindows 'CopyFileFromHostToGuest', [clientSecretPath, tmpClientSecretGuestPath]
        mkdir "$buildDir/jpackage"
        def pullAndBuildExitCode = vmrunWindows 'runProgramInGuest', ['-interactive', '-activeWindow', "$remoteCloneDir\\pull_and_build.bat", "$version"], true
        vmrunWindows 'deleteFileInGuest', [tmpClientSecretGuestPath]
        def buildLogGuestPath = "$buildDir/pull_and_build.windows.log"
        vmrunWindows 'CopyFileFromGuestToHost', ["$remoteCloneDir\\pull_and_build.log", buildLogGuestPath], true
        def remoteLogFile = Paths.get(buildLogGuestPath)
        if (pullAndBuildExitCode != 0) {
            if (Files.exists(remoteLogFile)) {
                println Files.readString(remoteLogFile)
            }
            throw new GradleScriptException("VM build execution failed, see errors above", null)
        }
        mkdir fullPackageOutputDir
        vmrunWindows 'CopyFileFromGuestToHost',
                ["$remoteCloneDir\\build\\fullpackage\\$finalFileNameWindowsMsi", "$fullPackageOutputDir/$finalFileNameWindowsMsi"]
        vmrunWindows 'CopyFileFromGuestToHost',
                ["$remoteCloneDir\\build\\fullpackage\\$finalFileNameWindowsMsix", "$fullPackageOutputDir/$finalFileNameWindowsMsix"]
        vmrunWindows 'suspend'
    }
}

int vmrunLinux(String command, List<String> args = [], ignoreExitCode = false) {
    vmrun linuxVmPath, 'VMRUN_LINUX_USER', 'VMRUN_LINUX_PWD', command, args, ignoreExitCode
}

task runRemoteLinuxBuild(dependsOn: requireClientSecret) {
    doLast {
        def remoteCloneDir = '/home/alexey/java/jiotty-photos-uploader'
        def vmUser = readEnvOrFail 'VMRUN_LINUX_USER'
        vmrunLinux 'start'
        def tmpClientSecretGuestPath = "/home/$vmUser/java/clientSecret.json"
        vmrunLinux 'CopyFileFromHostToGuest', [clientSecretPath, tmpClientSecretGuestPath]
        mkdir "$buildDir/jpackage"
        vmrunLinux 'runScriptInGuest', ['/bin/bash', "chmod +x $remoteCloneDir/pull_and_build.sh"]
        def pullAndBuildExitCode = vmrunLinux 'runProgramInGuest', ['-interactive', '-activeWindow', "$remoteCloneDir/pull_and_build.sh", "$version"], true
        vmrunLinux 'deleteFileInGuest', [tmpClientSecretGuestPath]
        def buildLogPath = "$buildDir/pull_and_build.linux.log"
        vmrunLinux 'CopyFileFromGuestToHost', ["$remoteCloneDir/pull_and_build.log", buildLogPath], true
        def remoteLogFile = Paths.get(buildLogPath)
        if (pullAndBuildExitCode != 0) {
            if (Files.exists(remoteLogFile)) {
                println Files.readString(remoteLogFile)
            }
            throw new GradleScriptException("VM build execution failed, see errors above", null)
        }
        mkdir fullPackageOutputDir
        vmrunLinux 'CopyFileFromGuestToHost', ["$remoteCloneDir/build/fullpackage/$finalFileNameLinuxDeb", "$fullPackageOutputDir/$finalFileNameLinuxDeb"]
        vmrunLinux 'CopyFileFromGuestToHost', ["$remoteCloneDir/build/fullpackage/$finalFileNameLinuxRpm", "$fullPackageOutputDir/$finalFileNameLinuxRpm"]
        vmrunLinux 'suspend'
    }
}

task moveFinalArtifactsToDeploymentDir() {
    doLast {
        def destinationRootPath = Paths.get(readEnvOrFail('HYPERPACKAGE_DESTINATION_DIR'))
        def destinationVersionPath = destinationRootPath.resolve version
        mkdir destinationVersionPath
        ant.move file: "$fullPackageOutputDir",
                tofile: "$destinationVersionPath"
    }
}
/**
 * Package the app on all platforms.
 */
task hyperpackage {
    dependsOn fullpackage
    dependsOn runRemoteWindowsBuild
    dependsOn runRemoteLinuxBuild
    dependsOn moveFinalArtifactsToDeploymentDir
    moveFinalArtifactsToDeploymentDir.mustRunAfter 'fullpackage', 'runRemoteWindowsBuild', 'runRemoteLinuxBuild'
}

private static readEnvOrNull(String variableName) {
    System.getProperty(variableName, System.getenv(variableName))
}

private static readEnvOrFail(String variableName) {
    def value = readEnvOrNull(variableName)
    if (value == null) {
        throw new InvalidUserDataException("Missing environment or system property ${variableName}")
    }
    return value
}

private static readEnvOrDefault(String variableName, String defaultValue) {
    readEnvOrNull(variableName) ?: defaultValue
}